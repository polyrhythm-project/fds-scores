#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Mon Aug 30 20:54:32 CEST 2021
# Last Modified: Wed May  3 01:46:36 PDT 2023
# Filename:      get-event-density-ratio
# Syntax:        perl 5
#
# Description:   Calculate the ratio between the number of notes in Group A and Group B.
#                Place the larger count below so that the value is 1.0 or less.
#
# Options        -v == verbose mode, print the group event counts used for calculations.
#
# Data is extracted using the -e and -g commands
#     composite -eg experiment2/R350*
# which generates these lines of the group event counts:
#     !!!group-b-event-count: 31
#     !!!group-a-event-count: 28
#     !!!composite-event-count: 47
#

use strict;
use Getopt::Long;

my $composite = `which composite`;
chomp $composite;
die "Cannot find composite tool.  Install humlib (https://github.com/craigsapp/humlib)\n" if $composite =~ /^\s*$/;

my $verboseQ = 0;
my $file = 0;

Getopt::Long::Configure("bundling");
GetOptions (
   'f|file:s' => \$file,
   'v|verbose' => \$verboseQ
);

if ($file !~ /^\s*$/) {
	my $value = processFile($file);
	print "$value\n";
	return 0;
} else {
	while (my $id = <>) {
		chomp $id;
		my $file = getFileByID($id);
		if ($file =~ /^\s*$/) {
			print "\n";
			next;
		}
		print "$file ===================================\n";
		#print "ID: $id\tFILENAME: $file\n";
		my $value = processFile($file);
		print "$value\n";
	}
}



##############################
##
## getFileById --
##

sub getFileByID {
	my ($id) = @_;
	my @files = glob("[RT]{$id}_*");
	return "" if @files == 0;
	return $files[0] if @files == 1;
	return "" if @files > 1;
}



##############################
##
## processFile -- extract data and calculate score
## 
## Extract event counts for each group:
##  composite -ge
##
## Generates these reference records:
## !!!group-a-event-count: 24
## !!!group-b-event-count: 24
##

sub processFile {
	my ($file) = @_;
print "GOT HERE NNN\n";
	my @contents = `cat $file | $composite -eg `;
print "GOT HERE OOO\n";
	chomp @contents;
	my $groupA = -1;
	my $groupB = -1;
	foreach my $line (@contents) {
		if ($line =~ /group-b-event-count:\s*(\d+)/) {
			$groupA = $1;
		} elsif ($line =~ /group-a-event-count:\s*(\d+)/) {
			$groupB = $1;
		}
	}
	if ($groupA <= 0) {
		print STDERR "ERROR Group A note count: $groupA \n";
		return "";
	} elsif ($groupB < 0) {
		print STDERR "ERROR Group B note count: $groupB \n";
		return "";
	} else {
		my $value = -1;
		if ($groupA > $groupB) {
			$value = $groupB / $groupA;
		} else {
			$value = $groupA / $groupB;
		}
		$value = int($value * 1000.0 + 0.5) / 1000.0;
		return $value;
#		if ($fileQ) {
#			print "$value\t$file\n";
#		} else {
#			print "$value\n";
#		}
#		if ($verboseQ) {
#			print "\tgroup-a-event-count: $groupA\n";
#			print "\tgroup-b-event-count: $groupB\n";
#		}
#		
	}
}



