#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sat Jun 19 20:27:11 PDT 2021
# Last Modified: Sat Jun 19 20:27:13 PDT 2021
# Filename:      getPoliarityRatio
# Syntax:        perl 5
#
# Description:   Calculate Polarity ratio:
# 
#                abs [(group-A-coincide-notes divided by group-A-total-notes) - (group-B-coincide-notes divided by group-B-total-notes) ] / composite-total-notes
#
#                INTERPRETATION: higher = more polarity; lower = more balanced/less polarity
#                NOTE: In theory, polarity (i.e., salience of one group in comparison
#                to the other) has a direction toward one or the other group; here,
#                absolute values are used because grp A vs. grp B is arbitrary except
#                for the fact that A will always include the lowest part.
#
#                Polarity may interact with nestedness, but I am not sure  if it
#                relates directly to complexity. It is more about whether one stream
#                will be heard as more salient, and to what degree.
#

use strict;
use Getopt::Long;

my $composite = `which composite`;
chomp $composite;
die "Cannot find composite tool.  Install humlib (https://github.com/craigsapp/humlib)\n" if $composite =~ /^\s*$/;

my $verboseQ = 0;
my $file;
Getopt::Long::Configure("bundling");
GetOptions (
   'v|verbose' => \$verboseQ,
   'f|file' => \$file
);


if ($file !~ /^\s*$/) {
	my $value = processFile($file);
	print "$value\n";
	return 0;
} else {
	while (my $id = <>) {
		chomp $id;
		my $file = getFileByID($id);
		if ($file =~ /^\s*$/) {
			print "\n";
			next;
		}
		print "$file ===================================\n" if $verboseQ;
		my $value = processFile($file);
		print "$value\n";
	}
}


##############################
##
## getFileById --
##

sub getFileByID {
	my ($id) = @_;
	my @files = glob("[RT]{$id}_*");
	return "" if @files == 0;
	return $files[0] if @files == 1;
	return "" if @files > 1;
}


##############################
##
## processFile -- extract data and calculate score
## 
##   !!!group-b-event-count: 31         # number of events in group B
##   !!!group-a-event-count: 28         # number of events in group A
##   !!!composite-event-count: 47       # number of events in full composite rhythm
##   !!!coincidence-event-count: 14     # number of events in concidence 
##

sub processFile {
	my ($file) = @_;
	my @contents = `cat $file | $composite -egB | $composite -egB`;
	chomp @contents;
	my $groupAtotal    = -1;
	my $groupBtotal    = -1;
	my $compositeTotal = -1;
	foreach my $line (@contents) {
		if ($line =~ /^!!!group-a-event-count:\s*(\d+)/) {
			$groupAtotal = $1;
		} elsif ($line =~ /^!!!group-b-event-count:\s*(\d+)/) {
			$groupBtotal = $1;
		} elsif ($line =~ /^!!!composite-event-count:\s*(\d+)/) {
			$compositeTotal = $1;
		}
	}

	if ($groupAtotal <= 0) {
		print STDERR "ERROR NO !!!group-a-event-count: reference record for $file\n";
		return "";
	} elsif ($groupBtotal <= 0) {
		print STDERR "ERROR NO !!!group-b-event-count: reference record for $file\n";
		return "";
	} elsif ($compositeTotal <= 0) {
		print STDERR "ERROR NO !!!composite-event-count: reference record for $file\n";
		return "";
	} else {
		# old calculation: my $value = abs($groupAcoincide / $groupAtotal - $groupBcoincide / $groupBtotal) / $compositeTotal;
		my $value = abs($groupAtotal - $groupBtotal) * 1.0 / $compositeTotal;
		$value = int($value * 1000.0 + 0.5) / 1000.0;
		return $value;
	}
	return "";
}



